#!/usr/bin/env python3

import argparse
import subprocess
import datetime
import shutil
import os

startup_timestamp = datetime.datetime.now()
default_filename = f"mustang-output-{startup_timestamp.year}{startup_timestamp.month}{startup_timestamp.day}-{startup_timestamp.hour}-{startup_timestamp.minute}-{startup_timestamp.second}"
default_logname = f"mustang-run-{startup_timestamp.year}{startup_timestamp.month}{startup_timestamp.day}-{startup_timestamp.hour}-{startup_timestamp.minute}-{startup_timestamp.second}.log"

parser = argparse.ArgumentParser(prog='./mustang.py', description='Parse command-line arguments as a wrapper for the MUSTANG binary.')
parser.add_argument("-t", "--threads-max", required=False, type=int, nargs='?', default=128, metavar='THREADS',
        help='The maximum number of threads this program allows to simultaneously run before stalling the creation of new threads (default: %(default)s).')
parser.add_argument("-p", "--paths", required=True, nargs='+', metavar='PATH', 
        help='One or more POSIX-like paths to recursively traverse within a MarFS instance and catalog objects along.')
parser.add_argument("-o", "--output", required=False, type=str, nargs='?', default=default_filename, metavar="FILE", 
        help='Output file where names of catalogged objects (as maintained in the program\'s hashtable) will be written.')
parser.add_argument("-l", "--logfile", required=False, type=str, nargs'?', default=default_logname, metavar="LOGFILE",
        help='Log file where thread-specific state changes, warnings, and errors will be recorded.')

if __name__ == '__main__':
    args = parser.parse_args()

    if not(os.access("./mustang_engine", os.F_OK)):
        print("Executable for MUSTANG engine does not exist! Please build it and try again.")
        exit(1)

    engine_args = ["./mustang_engine"]

    init_output_handle = f"{args.output}_in-progress"
    final_handle = f"{args.output}_finalized"

    engine_args.append(init_output_handle)
    engine_args.append(str(args.threads_max))
    engine_args.extend(args.paths)

    print(f"Using invocation: {engine_args}")

    try:
        subprocess.run(engine_args)
        shutil.move(init_output_handle, final_handle) 
    except subprocess.CalledProcessError:
        print("WARNING: mustang_engine process returned a non-zero exit code. Check logs for more details.")
    except:
        print("Some other error occurred. Please try again.")


